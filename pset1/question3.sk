// flags to speed up synthesis & provide debug output
pragma options "--fe-output-code -V3 --bnd-inbits 5 -bnd-int-range 100 --bnd-inline-amnt 6";

generator bit expBool([int nvars, int nconsts], int bnd, int[nvars] vars, int[nconsts] consts){
    assert bnd >= 0;
    int t = ??;

    // false
    if(t == 0){
        return false;
    }
    
    // less than
    if(t == 1){
        return exp(bnd - 1, vars, consts) < exp(bnd - 1, vars, consts);
    }
    
    bit a = expBool(bnd - 1, vars, consts);

    // not
    if(t == 2){
        return !a;
    }
    
    // and
    return a && expBool(bnd-1, vars, consts);
}

generator int exp([int nvars, int nconsts], int bnd, int[nvars] vars, int[nconsts] consts){
    assert bnd >= 0;
    int t = ??;

    // var or num
    if(t == 0){
        return {| vars[??] | consts[??] |};
    }

    int a = exp(bnd-1, vars, consts);
    int b = exp(bnd-1, vars, consts);

    // times
    if(t == 1){
        return a * b;
    }

    // plus
    if(t == 2){
        return a + b;
    }

    // ite
    if(expBool(bnd-1, vars, consts)){
        return a;
    } else {
        return b;
    }
}

int wrapper1(int x, int y){
    return exp(3, {x, y}, {});
}

harness void experiment1(){
    assert wrapper1(5, 5) == 15;
    assert wrapper1(8, 3) == 14;
    assert wrapper1(1234, 227) == 1688;
}

int wrapper2(int x, int y){
    return exp(3, {x, y}, {-1, 5});
}

harness void experiment2(){
    assert wrapper2(10,7) == 17;
    assert wrapper2(4,7) == -7;
    assert wrapper2(10,3) == 13;
    assert wrapper2(1, -7)== -6;
    assert wrapper2(1, 8) == -8;
}